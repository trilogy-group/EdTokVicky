// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  likes         Like[]
  comments      Comment[]
  followers     Follow[]  @relation("followings")
  followings    Follow[]  @relation("followers")

  @@fulltext([name, email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Main models
model Post {
  id          String  @id @default(cuid())
  caption     String    @db.Text
  videoURL    String    @db.Text
  coverURL    String    @db.Text
  videoWidth  Int
  videoHeight Int
  Video       Video[]
  likes       Like[]
  comments    Comment[]
}

model Question {
  id      String  @id @default(cuid())
  caption String  @db.Text
  Video   Video[]
}

model Video {
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  done        Boolean     @default(false)
  userId      String
  postId      String
  question    Question?   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  post        Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId  String?
  score       Int?

  @@id([postId, userId], name: "video_identifier")
  @@unique([postId, userId])
}

model Like {
  postId String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  postId   String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("followings", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followingId, followerId])
}
